Metadata-Version: 2.4
Name: todo-cli-app
Version: 0.1.0
Summary: A simple command-line interface for managing to-do tasks.
Author-email: Grace Noble <devnoble@gmail.com>
License: MIT
Keywords: todo,cli,task-manager
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: End Users/Desktop
Classifier: Topic :: Utilities
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer[rich]>=0.9.0
Requires-Dist: python-dateutil>=2.8.0
Dynamic: license-file

# To-Do CLI Application

A simple yet powerful command-line interface (CLI) application for managing your daily tasks. Built with Python, it allows you to add, list, and mark tasks as complete directly from your terminal.

## Table of Contents

1. [Features](#features)

2. [Technologies Used](#technologies-used)

3. [Project Structure](#project-structure)

4. [Getting Started](#getting-started)

   * [Prerequisites](#prerequisites)

   * [Installation](#installation)

   * [Database Initialization](#database-initialization)

5. [Usage](#usage)

   * [`add` command](#add-command)

   * [`list` command](#list-command)

   * [`complete` command](#complete-command)

   * [Getting Help](#getting-help)

6. [Future Enhancements](#future-enhancements)

7. [License](#license)

## 1. Features

* **Add Tasks:** Quickly add new tasks with optional due dates.

* **List Tasks:** View your tasks, filtered by pending, completed, or all.

* **Mark Complete:** Easily mark tasks as done.

* **Persistent Storage:** Tasks are saved locally using SQLite, so they persist across sessions.

* **User-Friendly Interface:** Clear, colorful output powered by Rich.

## 2. Technologies Used

* **Python 3.8+**: The core programming language.

* **Typer**: A modern, type-hint-driven library for building robust and user-friendly command-line interfaces.

* **Rich**: A fantastic library for beautiful terminal rendering, providing colors, tables, and rich text.

* **SQLite3**: Python's built-in module for interacting with SQLite, a lightweight, file-based relational database, used for persistent task storage.

* **`python-dateutil`**: A powerful library for parsing human-readable date and time strings.

## 3. Project Structure

The project is organized into a clear and modular structure to ensure maintainability and scalability:
```
todo_cli/
├── .venv/                   # Python Virtual Environment (ignored by Git)
├── app/                     # Main application package
│   ├── init.py          # Makes 'app' a Python package
│   ├── main.py              # Main CLI entry point, defines commands
│   ├── database.py          # Handles all SQLite database interactions
│   ├── models.py            # Defines the 'Task' data structure
│   └── utils.py             # Helper functions (e.g., date parsing, validation)
├── tests/                   # Unit and integration tests
│   ├── init.py
│   ├── test_database.py     # Tests for database.py functions
│   └── test_main.py         # Tests for CLI commands
├── .gitignore               # Specifies files/directories to be ignored by Git
├── README.md                # This documentation file
├── requirements.txt         # Lists Python dependencies
└── pyproject.toml           # (Optional) For modern project metadata and tool configuration
```

## 4. Getting Started

Follow these steps to set up and run the To-Do CLI application on your local machine.

### Prerequisites

* **Python 3.8+**: Download from [python.org](https://www.python.org/downloads/).

* **Git**: Download from [git-scm.com](https://git-scm.com/downloads).

### Installation

1. **Clone the Repository**:
   Open your terminal or command prompt and clone the project:

git clone https://github.com/your-username/todo_cli.git


(Replace `your-username` with your actual GitHub username.)

2. **Navigate to the Project Directory**:

cd todo_cli


3. **Create and Activate a Virtual Environment**:
It's highly recommended to use a virtual environment to isolate project dependencies.

Create the virtual environment
python3 -m venv .venv

Activate the virtual environment:
On macOS / Linux:
source .venv/bin/activate

On Windows (Command Prompt):
.venv\Scripts\activate.bat

On Windows (PowerShell):
.venv\Scripts\Activate.ps1


You should see `(.venv)` or similar at the beginning of your terminal prompt, indicating the virtual environment is active.

4. **Install Dependencies**:
With your virtual environment activated, install the required Python libraries:

pip install -r requirements.txt


### Database Initialization

This application uses a local SQLite database, stored in a single file named `tasks.db`. **You will not find this file in the Git repository as it's generated locally for each user.**

The first time you run any `todo` command (e.g., `python -m app.main add "My first task"`), the application will automatically:

1. **Create the `tasks.db` file** in your project's root directory if it doesn't already exist.

2. **Set up the necessary `tasks` table** structure inside that `tasks.db` file.

This ensures a clean and automatic setup without any manual database configuration required from your end.

## 5. Usage

Once installed, you can start using the `todo` commands.

### `add` command

Adds a new task to your to-do list.

python -m app.main add "Your task description here" [--due &lt;date>]


* `<description>`: (Required) The text of your task.

* `--due` or `-d`: (Optional) Specify a due date.

  * **Accepted formats**: `YYYY-MM-DD` (e.g., `2025-12-31`), `today`, `tomorrow`, `next week`, `next month`, `next year`.

**Examples:**

Add a simple task
python -m app.main add "Finish project report"

Add a task due on a specific date
python -m app.main add "Schedule team meeting" --due 2025-06-01

Add a task due tomorrow
python -m app.main add "Call client about proposal" -d tomorrow

Add a task due next week
python -m app.main add "Plan weekend trip" -d "next week"


### `list` command

Lists tasks in your to-do list. By default, it shows only pending tasks.

python -m app.main list [--all | --pending | --completed]


* `--all` or `-a`: Show all tasks (including completed ones).

* `--pending` or `-p`: Show only pending tasks (default behavior).

* `--completed` or `-c`: Show only completed tasks.

**Note:** You can only use one of `--all`, `--pending`, or `--completed` at a time.

**Examples:**

List all pending tasks (default)
python -m app.main list

List all tasks (pending and completed)
python -m app.main list --all

List only completed tasks
python -m app.main list --completed


### `complete` command

Marks a task as complete.

python -m app.main complete &lt;task_id>


* `<task_id>`: (Required) The numerical ID of the task to mark as complete. You can find the task ID using the `list` command.

**Examples:**

Mark task with ID 1 as complete
python -m app.main complete 1

If task 1 was already complete
python -m app.main complete 1

Output: Task 1 'Finish project report' is already completed.

### Getting Help

You can always get help for the main application or specific commands using the `--help` flag:

Get help for the main application
python -m app.main --help

Get help for the 'add' command
python -m app.main add --help


## 6. Future Enhancements

Here are some ideas for extending this application:

* **Delete Task**: Add a command to permanently remove tasks.

* **Edit Task**: Implement a command to modify task descriptions or due dates.

* **Search/Filter**: More advanced filtering options (e.g., by keyword, by date range).

* **Priorities**: Add a priority level to tasks.

* **Categories/Tags**: Organize tasks into categories or with tags.

* **Export/Import**: Allow exporting tasks to CSV/JSON or importing from them.

* **Undo/Redo**: Implement an undo/redo functionality.

## 7. License

This project is open-source and available under the [MIT License](LICENSE)
